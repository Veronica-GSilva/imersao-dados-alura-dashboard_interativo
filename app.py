import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go


# --- Configura√ß√£o da P√°gina ---
# Define o t√≠tulo da p√°gina, o √≠cone e o layout para ocupar a largura inteira.
st.set_page_config(
    page_title="An√°lise de Sal√°rios na √Årea de Dados",
    page_icon="üìä",
    layout="wide",
)

# --- Carregamento dos dados ---
df = pd.read_csv("https://raw.githubusercontent.com/Veronica-GSilva/imersao-dados-alura-DADOSRAW/refs/heads/main/dados-imersao-final.csv")
# --- Barra Lateral (Filtros) ---
st.sidebar.header("üîç Filtros")

# Filtro de Ano
anos_disponiveis = sorted(df['Ano'].unique())
anos_selecionados = st.sidebar.multiselect("Ano", anos_disponiveis, default=anos_disponiveis)

# Filtro de Senioridade
senioridades_disponiveis = sorted(df['Senioridade'].unique())
senioridades_selecionadas = st.sidebar.multiselect("Senioridade", senioridades_disponiveis, default=senioridades_disponiveis)

# Filtro por Tipo de Contrato
contratos_disponiveis = sorted(df['Contrato'].unique())
contratos_selecionados = st.sidebar.multiselect("Tipo de Contrato", contratos_disponiveis, default=contratos_disponiveis)

# Filtro por Tamanho da Empresa
tamanhos_disponiveis = sorted(df['Tamanho_Empresa'].unique())
tamanhos_selecionados = st.sidebar.multiselect("Tamanho da Empresa", tamanhos_disponiveis, default=tamanhos_disponiveis)

# --- Filtragem do DataFrame ---
# O dataframe principal √© filtrado com base nas sele√ß√µes feitas na barra lateral.
df_filtrado = df[
    (df['Ano'].isin(anos_selecionados)) &
    (df['Senioridade'].isin(senioridades_selecionadas)) &
    (df['Contrato'].isin(contratos_selecionados)) &
    (df['Tamanho_Empresa'].isin(tamanhos_selecionados))
]

# --- Conte√∫do Principal ---
st.title("üí∞üìäAn√°lise de Sal√°rios na √Årea de Dados")
st.markdown("Explore os dados salariais na √°rea de dados nos √∫ltimos anos")
st.markdown("Utilize os filtros √† esquerda para refinar sua an√°lise.")

# --- M√©tricas Principais (KPIs) ---
st.subheader("M√©tricas gerais (Sal√°rio anual em USD)")

if not df_filtrado.empty:
    salario_medio = df_filtrado['Usd'].mean()
    salario_maximo = df_filtrado['Usd'].max()
    total_registros = df_filtrado.shape[0]
    cargo_mais_frequente = df_filtrado["Cargo"].mode()[0]
else:
    salario_medio, salario_mediano, salario_maximo, total_registros, cargo_mais_comum = 0, 0, 0, ""

col1, col2, col3, col4 = st.columns(4)
col1.metric("Sal√°rio M√©dio", f"${salario_medio:,.0f}")
col2.metric("Sal√°rio M√°ximo", f"${salario_maximo:,.0f}")
with col3:
    st.markdown("###### Total de Profissionais")
    st.markdown(f"<p style='font-size: 24px;'>{total_registros:,}</p>", unsafe_allow_html=True)
with col4:
    st.markdown("###### Cargo mais frequente:")
    # Quebra o nome do cargo em duas linhas usando <br>
    cargo_formatado = cargo_mais_frequente.replace(" ", "<br>")
    st.markdown(f"<p style='font-size: 24px; line-height: 1.2;'>{cargo_formatado}</p>", unsafe_allow_html=True)



st.markdown("---")

# --- An√°lises Visuais com Plotly ---
st.subheader("Gr√°ficos")

col_graf1, col_graf2 = st.columns(2)

with col_graf1:
    if not df_filtrado.empty:
        top_cargos = df_filtrado.groupby('Cargo')['Usd'].mean().nlargest(10).sort_values(ascending=True).reset_index()
        grafico_cargos = px.bar(
            top_cargos,
            x='Usd',
            y='Cargo',
            orientation='h',
            title="Top 10 cargos por sal√°rio m√©dio",
            labels={'Usd': 'M√©dia salarial anual (USD)', 'Cargo': ''}
        )
        grafico_cargos.update_layout(title_x=0.1, yaxis={'categoryorder':'total ascending'})
        st.plotly_chart(grafico_cargos, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de cargos.")

with col_graf2:
    if not df_filtrado.empty:
        grafico_hist = px.histogram(
            df_filtrado,
            x='Usd',
            nbins=30,
            title="Distribui√ß√£o de sal√°rios anuais",
        )
        grafico_hist.update_layout(title_x=0,
        xaxis_title="Faixa Salarial (USD)",
        yaxis_title="Quantidade de Profissionais")
        st.plotly_chart(grafico_hist, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de distribui√ß√£o.")

col_graf3, col_graf4 = st.columns([1, 1.3])

with col_graf3:
    if not df_filtrado.empty:
        Modelo_Trabalho_contagem = df_filtrado['Modelo_Trabalho'].value_counts().reset_index()
        Modelo_Trabalho_contagem.columns = ['Modelo_Trabalho', 'Quantidade']
        grafico_Modelo_Trabalho = px.pie(
            Modelo_Trabalho_contagem,
            names='Modelo_Trabalho',
            values='Quantidade',
            title='Propor√ß√£o<br> - Modelo de Trabalho',
            hole=0.5
        )
        grafico_Modelo_Trabalho.update_traces(textinfo='percent+label', textfont_size=11)
        grafico_Modelo_Trabalho.update_layout(margin=dict(t=40,b=0,l=0,r=80),title_x=0)
        st.plotly_chart(grafico_Modelo_Trabalho, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir no gr√°fico dos tipos de trabalho.")

with col_graf4:
    if not df_filtrado.empty:
        df_ds = df_filtrado[df_filtrado['Cargo'] == 'Data Scientist']
        media_ds_pais = df_ds.groupby('Residencia_ISO3')['Usd'].mean().reset_index()

        # Criar o globo
        grafico_paises = px.choropleth(
            media_ds_pais,
            locations='Residencia_ISO3',
            color='Usd',
            color_continuous_scale='rdylgn',
            title='Sal√°rio m√©dio de Cientista de Dados<br>- Por Pa√≠s',
            labels={'Usd': 'Sal√°rio M√©dio (USD)', 'Residencia_ISO3': 'Pa√≠s'}
        )

        # Configura visual do globo
        grafico_paises.update_geos(
            projection_type="orthographic",
            showcoastlines=True,
            coastlinecolor="white",
            showland=True,
            landcolor="lightgray",
            oceancolor="rgba(0,120,200,0.8)",  # azul transl√∫cido
            showocean=True,
            bgcolor="black"
        )

        # Configura o layout do gr√°fico (sem anima√ß√£o)
        grafico_paises.update_layout(
            height=500,  # Define uma altura fixa para evitar o corte
            margin=dict(t=80, b=20, l=20, r=20),
            title_x=0,
            paper_bgcolor="white",
            plot_bgcolor="white",
            title_font=dict(size=18, color="black"),
            coloraxis_colorbar=dict(
                title="USD",
                tickfont=dict(color="black"),
                titlefont=dict(color="black")
            )
        )

        st.plotly_chart(grafico_paises, use_container_width=True)
    else:
        st.warning("Nenhum dado para exibir no gr√°fico de pa√≠ses.")


# --- Tabela de Dados Detalhados ---
st.subheader("Dados Detalhados")

# Crie uma c√≥pia do dataframe para exibi√ß√£o, com as modifica√ß√µes
df_para_exibir = df_filtrado.drop(columns=['Residencia']) \
                            .rename(columns={'Residencia_ISO3': 'Resid√™ncia'})

# Exiba o novo dataframe formatado
st.dataframe(df_para_exibir)
